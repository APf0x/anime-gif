{"version":3,"file":"extension.js","mappings":"kHAAA,eACA,SAGA,wBAIEA,YAA6BC,GAAA,KAAAA,cAAAA,EAEtBC,mBAAmBC,GACxBC,KAAKC,MAAQF,EAEbA,EAAYG,QAAQC,QAAU,CAE5BC,eAAe,EAEfC,mBAAoB,CAACL,KAAKH,gBAG5BE,EAAYG,QAAQI,KAAON,KAAKO,mBAAmBR,EAAYG,SAE/DH,EAAYG,QAAQM,qBAAoBC,MAAOC,IAC7C,OAAQA,EAAKC,MACX,IAAK,SACH,IAAKD,EAAKE,MACR,OAEFC,EAAOC,OAAOC,uBAAuBL,EAAKE,OAC1C,MAEF,IAAK,UACH,IAAKF,EAAKE,MACR,OAEFC,EAAOC,OAAOE,iBAAiBN,EAAKE,WAOrCK,OAAOC,GACZlB,KAAKC,MAAQiB,EAGPX,mBAAmBL,GACzB,MAAMiB,EAAgBjB,EAAQkB,aAC5BP,EAAOQ,IAAIC,SAAStB,KAAKH,cAAe,QAAS,cAE7C0B,EAAiBrB,EAAQkB,aAC3BP,EAAOQ,IAAIC,SAAStB,KAAKH,cAAe,QAAS,eAG/C2B,EAAYtB,EAAQkB,aACxBP,EAAOQ,IAAIC,SAAStB,KAAKH,cAAe,MAAO,wBAE3C4B,EAAevB,EAAQkB,aAC3BP,EAAOQ,IAAIC,SAAStB,KAAKH,cAAe,MAAO,yBAK3C6B,GAAQ,IAAAC,YAEd,MAAO,uZASLzB,EAAQ0B,gCACaF,8GAETP,6CACAI,6CACIE,mFAGDC,WAAeF,iD,+EClFpC,sBACC,IAAIK,EAAO,GACX,MAAMC,EAAW,iEACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACvBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASM,SAE7D,OAAOP,I,QCNRQ,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCnBf,eAEA,SAIA,oBAAyBQ,GAExB,MAAMC,EAAkB,IAAI,EAAAC,gBAAgBF,EAAQG,cACpDH,EAAQI,cAAcC,KACpBtC,EAAOC,OAAOsC,4BAA4B,gBAAiBL,KAqB9D,2B","sources":["webpack://anime-gif/./src/SidebarProvider.ts","webpack://anime-gif/./src/getNonce.ts","webpack://anime-gif/external commonjs \"vscode\"","webpack://anime-gif/webpack/bootstrap","webpack://anime-gif/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { getNonce } from \"./getNonce\";\n\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  _view?: vscode.WebviewView;\n  _doc?: vscode.TextDocument;\n\n  constructor(private readonly _extensionUri: vscode.Uri) {}\n\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      // Allow scripts in the webview\n      enableScripts: true,\n\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        case \"onInfo\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showInformationMessage(data.value);\n          break;\n        }\n        case \"onError\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showErrorMessage(data.value);\n          break;\n        }\n      }\n    });\n  }\n\n  public revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    const styleResetUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\n    );\n    const styleVSCodeUri = webview.asWebviewUri(\n        vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\n      );\n      \n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.js\")\n    );\n    const styleMainUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.css\")\n    );\n\n\n    // Use a nonce to only allow a specific script to be run.\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n        -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"img-src https: data:; style-src 'unsafe-inline' ${\n      webview.cspSource\n    }; script-src 'nonce-${nonce}';\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\t\t\t</head>\n            <body>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n  }\n}","export function getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { AnimePanel } from './AnimePannel';\nimport { SidebarProvider } from './SidebarProvider';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst sidebarProvider = new SidebarProvider(context.extensionUri);\n\tcontext.subscriptions.push(\n\t  vscode.window.registerWebviewViewProvider(\"anime-sidebar\", sidebarProvider)\n\t);\n\t// context.subscriptions.push(\n\t// \tvscode.commands.registerCommand('anime-gif.helloWorld', () => {\n\t// \t\tAnimePanel.createOrShow(context.extensionUri);\n\t// \t})\n\t// );\n\t// to put in package;\n\t\t\t\t// {\n\t\t\t// \t\"command\": \"anime-gif.helloWorld\",\n\t\t\t// \t\"title\": \"Hello World\"\n\t\t\t// }\n\n\t// context.subscriptions.push(\n\t// \tvscode.commands.registerCommand(\"anime-gif.good\", () =>{\n\t// \t\tvscode.window.showInformationMessage(\"how are you ^^\", \"good\" , \"bad\");\n\t// \t})\n\t// );\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["constructor","_extensionUri","resolveWebviewView","webviewView","this","_view","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","async","data","type","value","vscode","window","showInformationMessage","showErrorMessage","revive","panel","styleResetUri","asWebviewUri","Uri","joinPath","styleVSCodeUri","scriptUri","styleMainUri","nonce","getNonce","cspSource","text","possible","i","charAt","Math","floor","random","length","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","sidebarProvider","SidebarProvider","extensionUri","subscriptions","push","registerWebviewViewProvider"],"sourceRoot":""}